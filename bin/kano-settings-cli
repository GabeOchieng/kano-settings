#!/usr/bin/env python

# kano-settings-cli
#
# Copyright (C) 2014-2019 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPLv2

"""
Command line tool for changing settings on the Kano

Usage:
    kano-settings-cli [options] get audio
    kano-settings-cli [options] set audio (hdmi | analogue | default)
    kano-settings-cli [options] get keyboard
    kano-settings-cli [options] set keyboard (--layout <layout_code> | --load)
    kano-settings-cli [options] get network
    kano-settings-cli [options] get gfx_driver
    kano-settings-cli [options] set gfx_driver (enable | disable)
    kano-settings-cli [options] get overscan
    kano-settings-cli [options] set overscan <top> <left> <bottom> <right>
    kano-settings-cli [options] set parental --level=<level> <password>
    kano-settings-cli [options] dump-edid
    kano-settings-cli -h | --help

Commands:
    get         Get the currently set property.
    set         Configure a property to a value.
    dump-edid   Dump attached screen's EDID to the /boot/ partition.

Options:
    --force       Force a command to perform the action.
    --verbose     Print more debugging information.
    -h, --help    Show this message.

Values:
    hdmi          Set the audio to HDMI
    analogue      Set the audio to use the headphone jack
    layout        The keyboard layout code
    load          Set the keyboard to the value saved by Kano-Settings
    network       Get the network info
    verbose       Verbose mode
    enable        enable gfx_driver driver
    disable       disable gfx_driver driver
    level         The level of Parental Controls (-1: disabled, 0: low,
                  1: medium, 2: high, 3: ultimate)

Examples:
    kano-settings-cli set parental --level=3 "kano"
        Sets parental controls for the user executing the command to Ultimate
        with "kano" as the parental password to change the setting.
    kano-settings-cli set parental --level=-1 "kano"
        Disables parental controls for the user executing the command.
"""


import os
import sys
import json
import docopt

if __name__ == '__main__' and __package__ is None:
    DIR_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if DIR_PATH != '/usr':
        sys.path.insert(1, DIR_PATH)
        LOCALE_PATH = os.path.join(DIR_PATH, 'locale')
    else:
        LOCALE_PATH = None

import kano_i18n.init
kano_i18n.init.install('kano-settings', LOCALE_PATH)

from kano_settings.system.keyboard_config import set_saved_keyboard, set_keyboard
from kano_settings.system.display import get_gfx_driver, set_gfx_driver, \
    read_overscan_values, write_overscan_values, dump_raw_edid
from kano_settings.system.advanced import set_parental_enabled, \
    set_parental_level
from kano_settings.config_file import get_setting

from kano_settings.return_codes import RC_SUCCESS, RC_UNEXPECTED_ERROR, \
    RC_INCORRECT_ARGS, RC_WRONG_PERMISSIONS


_g_verbose = False


def print_v(string):
    if _g_verbose:
        print string.encode('utf-8')


def main(args):
    global _g_verbose

    _g_verbose = args['--verbose']

    if args['set']:

        if args['audio']:
            if args['hdmi']:
                setting = 'hdmi'
                hdmi_enabled = True
            elif args['analogue']:
                setting = 'analogue'
                hdmi_enabled = False
            else:
                setting = 'default'
                hdmi_enabled = False

            print_v(_("setting audio to {}").format(_(setting)))  # noqa

            # only import on use, because this is slow
            from kano_settings.system.audio import set_to_HDMI
            set_to_HDMI(hdmi_enabled, args['--force'])

        elif args['keyboard']:
            if args['--load']:
                set_saved_keyboard()
                print_v(_("Setting keyboard to value loaded from settings"))  # noqa
            elif args['--layout']:
                layout_code = args['<layout_code>']
                layout_code_list = layout_code.split(' ')

                if len(layout_code_list) >= 1:
                    locale = layout_code_list[0]
                else:
                    locale = 'en_US'

                if len(layout_code_list) >= 2:
                    variant = layout_code_list[1]
                else:
                    variant = 'generic'

                set_keyboard(locale, variant, save=True)
                print_v(_("Setting keyboard to {} {}").format(_(locale), _(variant)))  # noqa

        elif args['gfx_driver']:
            if args['enable']:
                set_gfx_driver(True)
            elif args['disable']:
                set_gfx_driver(False)

        elif args['overscan']:
            overscan_values = {
                'top': args['<top>'],
                'bottom': args['<bottom>'],
                'left': args['<left>'],
                'right': args['<right>']
            }
            write_overscan_values(overscan_values)

        elif args['parental']:
            if int(args['--level']) == -1:
                print_v(
                    _("Disabling parental controls: {}").format(  # noqa
                    set_parental_enabled(False, args['<password>']))
                )
            else:
                print_v(
                    _("Enabling parental controls: {}").format(  # noqa
                    set_parental_enabled(True, args['<password>']))
                )
                set_parental_level(int(args['--level']))

    elif args['get']:
        if args['audio']:
            print_v(
                _("Audio settings:\n\n"  # noqa
                  "Audio mode: {}").format(
                    get_setting('Audio')
                )
            )
        elif args['network']:
            print_v(
                _("Network settings:\n\n"  # noqa
                  "WiFi: {}, WiFi Connection Attempted: {},\n"
                  "Proxy port : {}, Proxy IP: {}, "
                  "Proxy username : {}, Proxy type : {}").format(
                    get_setting('Wifi'),
                    get_setting('Wifi-connection-attempted'),
                    get_setting('Proxy-port'),
                    get_setting('Proxy-ip'),
                    get_setting('Proxy-username'),
                    get_setting('Proxy-type')
                )
            )
        elif args['keyboard']:
            print_v(
                _("Keyboard settings:\n\n"  # noqa
                  "Continent: {}, Country: {}, Variant: {}\n"
                  "(indicies - Continent: {}, Country: {}, Variant: {})").format(
                    get_setting('Keyboard-continent-human'),
                    get_setting('Keyboard-country-human'),
                    get_setting('Keyboard-variant-human'),
                    get_setting('Keyboard-continent-index'),
                    get_setting('Keyboard-country-index'),
                    get_setting('Keyboard-variant-index')
                )
            )
        elif args['gfx_driver']:
            print 'gfx_driver: {}'.format(get_gfx_driver())

        elif args['overscan']:
            print 'Overscan values: {}'.format(json.dumps(read_overscan_values()))

    elif args['dump-edid']:
        # This function was used for all screen data under kano-settings/res/edid/raw
        # Customers can use this in order for us to help debug screen related issues.
        edid_path = dump_raw_edid()

        if not edid_path:
            print_v(_('Could not perform operation.'))  # noqa
            return RC_UNEXPECTED_ERROR
        else:
            print_v(_('Generated {}').format(edid_path))  # noqa


if __name__ == "__main__":
    if os.getuid() != 0:
        print _('Program must be run as root.')  # noqa
        sys.exit(RC_WRONG_PERMISSIONS)

    try:
        args = docopt.docopt(__doc__)
    except docopt.DocoptExit:
        print __doc__
        sys.exit(RC_INCORRECT_ARGS)

    sys.exit(main(args) or RC_SUCCESS)
